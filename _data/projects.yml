
- name: Coral Engine
  start: July 2023
  end: August 2024
  code_link: https://github.com/GuusKemperman/CoralEngine
  details_link: "/projects/coral-engine"
  thumbnail-vid: /img/projects/y2/coral/trailer_preview.mp4
  main-page-video: /img/projects/y2/coral/CoralTrailer.mp4
  engine: C++
  team_size: Solo for 8 months & Team of 10 for 6 months
  platforms: Windows | PS5
  duration: 14 Months
  brief-description: Coral Engine began as a personal passion project during a summer holiday. Over time, it evolved into a full-fledged engine featuring <strong>visual scripting</strong> and a <strong>robust editor</strong>. After eight months of solo development, I was joined by five talented programmers to prepare for the development of Lichgate. Three designers joined our team and were able to utilise its capabilities to create their own prototypes, assets and gameplay features.
  contribution: Designed core architecture | Runtime Reflection | Visual scripting | Serialization | Prefabs | Editor | Asset management | Physics | Particles | Optimisations | And much more!
  tags: 
    - highlighted

- name: Lichgate
  start: April 2024
  end: July 2024
  code_link: https://github.com/GuusKemperman/CoralEngine
  game_link: https://buas.itch.io/lichgate 
  details_link: "/projects/lichgate"
  thumbnail-img: /img/projects/y2/lichgate/lichgate.gif
  engine: Coral Engine
  num_programmers: 6
  num_designers: 3
  platforms: Windows | PS5
  duration: 8 Weeks
  brief-description: Lichgate - a relentless survivor, action rogue-like where you must grow stronger to vanquish the undead - made with our custom-built Coral Engine!
  contribution: AI Navigation | Procedural Terrain

- name: Turbo Tails
  start: April 2022
  end: June 2022
  game_link: https://gennakh.itch.io/turbo-tails
  details_link: "/projects/turbo-tails"
  thumbnail-img: /img/projects/y1/blockd/large.gif
  secondary-image: /img/projects/y1/blockd/small.png
  engine: Unreal
  num_programmers: 3
  num_designers: 4
  num_artists: 6
  platforms: Windows
  duration: 8 Weeks
  brief-description: A 4 player mouse racing game with chaotic weapons. It received the Best Y1 Game 2023 award from industry professionals and the Best Tech award from BUAS staff.
  contribution: Designed AI | Local Multiplayer | UI | Core systems
    
- name: Spider Sling
  start: Febuary 2022
  end: April 2022
  game_link: https://guuskemperman.itch.io/spider-sling
  code_link: https://github.com/GuusKemperman/2D-Raytracer
  details_link: "/projects/spider-sling"
  thumbnail-img: /img/projects/y1/blockc/game-short.gif
  main-page-image: /img/projects/y1/blockc/game-full.gif
  engine: C++ | OpenGL
  team_size: Solo
  platforms: Windows
  duration: 8 Weeks
  brief-description: A game where you try to survive for as long as possible, created in a custom highly <strong>optimised 2D GPU Raytracing framework</strong>.
  contribution: Optimisations | Physics | Graphics

- name: RTS 3D
  start: November 2021
  end: January 2022
  game_link: https://guuskemperman.itch.io/rts-game-3d
  code_link: https://github.com/GuusKemperman/RTS3D
  details_link: "/projects/rts-3D"
  thumbnail-img: /img/projects/y1/blockb/large.gif
  main-page-video: "/img/projects/y1/blockb/trailer.mp4"
  secondary-image: /img/projects/y1/blockb/small.png
  engine: C++ | OpenGL
  team_size: Solo
  platforms: Windows | Linux
  duration: 8 Weeks
  brief-description: A cross-platform retro RTS
  contribution: Procedural Enemies & Terrain | Graphics | AI
  full-description: >
    This is the first cross-platform I've created, able to run on a Windows PC, but also on any Raspberry Pi; a cheaper way of becoming familiar with console-programming. I gained experience in hardware rendering and OpenGL. More advanced topics, such as instancing, animations and procedural textures were used. I learned my way around ImGui and the Bullet Physics library. The terrain and forests are procedurally generated, with a basic level editor to tweak the parameters as needed. The entire gamestate can be serialized to a compressed file, to be loaded in again at a later time.

- name: RTS 2D
  role: Developer
  start: September 2021
  end: October 2021
  game_link: https://guuskemperman.itch.io/rts-game-2d
  code_link: https://github.com/GuusKemperman/RTS2D
  details_link: "/projects/rts-2D"
  thumbnail-img: /img/projects/y1/blocka/large.gif
  secondary-image: /img/projects/y1/blocka/small.png
  main-page-video: "/img/projects/y1/blocka/Week 7 - main menu.mp4"
  engine: C++
  team_size: Solo
  platforms: Windows
  duration: 8 Weeks
  brief-description: A CPU rendered 2D RTS game
  contribution: Graphics | AI

  full-description: >
    I used autonomous steering combined with a finite state machine to achieve realistic behaviour with coordination among the units, allowing them to move inside enormous formations.
    <br><br>
    Acceleration structures were utilized to allow battles between thousands of units.

- name: Snow man's land
  role: Developer
  start: December 2020
  end: May 2021
  game_link: https://guuskemperman.itch.io/snow-mans-land
  details_link: "/projects/snow-mans-land"
  thumbnail-img: /img/projects/intakeassignment/large.png
  secondary-image: /img/projects/intakeassignment/small.png
  engine: C++
  team_size: Solo
  platforms: Windows
  duration: 7 Months
  brief-description: The project that got me accepted into BUAS. Build snowmen, shoot snowballs and destroy the enemy igloos!
  contribution: Graphics | AI | UI | Audio | Procedural generation

  full-description: >
    This way my first game written in C++.
    The CPU based rendering required significant optimization and introduced me to the workings of rasterization.
    I gained a lot of experience with UI programming during this project.
    Implementing the AI's behaviour familiarised me with AI-programming and pathfinding algorithms.
    The wave function collapse algorithm is utilized by the level editor to determine the visual design of the tilemap.
